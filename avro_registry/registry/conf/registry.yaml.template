# registries configuration
modules:
  - name: schema-registry
    className: com.hortonworks.registries.schemaregistry.webservice.SchemaRegistryModule
    config:
      schemaProviders:
        - providerClass: "com.hortonworks.registries.schemaregistry.avro.AvroSchemaProvider"
          defaultSerializerClass: "com.hortonworks.registries.schemaregistry.serdes.avro.AvroSnapshotSerializer"
          defaultDeserializerClass: "com.hortonworks.registries.schemaregistry.serdes.avro.AvroSnapshotDeserializer"
      # schema cache properties
      # inmemory schema versions cache size
      schemaCacheSize: 10000
      # inmemory schema version cache entry expiry interval after access
      schemaCacheExpiryInterval: 3600

servletFilters:
# - className: "com.hortonworks.registries.auth.server.AuthenticationFilter"
#   params:
#     type: "kerberos"
#     kerberos.principal: "HTTP/streamline-ui-host.com"
#     kerberos.keytab: "/vagrant/keytabs/http.keytab"
#     kerberos.name.rules: "RULE:[2:$1@$0]([jt]t@.*EXAMPLE.COM)s/.*/$MAPRED_USER/ RULE:[2:$1@$0]([nd]n@.*EXAMPLE.COM)s/.*/$HDFS_USER/DEFAULT"
#     allowed.resources: "401.html,back-default.png,favicon.ico"
#Note that it is highly recommended to force ssl connections if you are using the jwt handler config below. Unsecured connections will expose jwt
# - className: "com.hortonworks.registries.auth.server.AuthenticationFilter"
#   params:
#     type: "com.hortonworks.registries.auth.server.JWTAuthenticationHandler"
#     kerberos.principal: "HTTP/ui-host.com"
#     kerberos.keytab: "/vagrant/keytabs/http.keytab"
#     kerberos.name.rules: "RULE:[2:$1@$0]([jt]t@.*EXAMPLE.COM)s/.*/$MAPRED_USER/ RULE:[2:$1@$0]([nd]n@.*EXAMPLE.COM)s/.*/$HDFS_USER/DEFAULT"
#     allowed.resources: "401.html,back-default.png,favicon.ico"
#     authentication.provider.url: "https://localhost:8883/gateway/knoxsso/api/v1/websso"
#     public.key.pem: "<public key corresponding to the PKI key pair of the token issuer>"
 - className: "com.hortonworks.registries.schemaregistry.webservice.RewriteUriFilter"
   params:
     # value format is [<targetpath>,<paths-should-be-redirected-to>,*|]*
     # below /subjects and /schemas/ids are forwarded to /api/v1/confluent
     forwardPaths: "/api/v1/confluent,/subjects/*,/schemas/ids/*"
     redirectPaths: "/ui/,/"

# HA configuration
#haConfig:
#  className: com.hortonworks.registries.ha.zk.ZKLeadershipParticipant
#  config:
#    # This url is a list of ZK servers separated by ,
#    connect.url: "localhost:2181"
#    # root node prefix in ZK for this instance
#    root: "/registry"
#    session.timeout.ms: 30000
#    connection.timeout.ms: 20000
#    retry.limit: 5
#    retry.base.sleep.time.ms: 1000
#    retry.max.sleep.time.ms: 5000

# Filesystem based jar storage
fileStorageConfiguration:
  className: "com.hortonworks.registries.common.util.LocalFileSystemStorage"
  properties:
    directory: "/tmp/schema-registry/jars"

# MySQL based jdbc provider configuration is:
storageProviderConfiguration:
 providerClass: "com.hortonworks.registries.storage.impl.jdbc.JdbcStorageManager"
 properties:
   db.type: "mysql"
   queryTimeoutInSecs: 30
   db.properties:
     dataSourceClassName: "com.mysql.jdbc.jdbc2.optional.MysqlDataSource"
     dataSource.url: "jdbc:mysql://$DB_HOST:$DB_PORT/$DB_NAME"
     dataSource.user: "$DB_USER"
     dataSource.password: "$DB_PASSWORD"

#swagger configuration
swagger:
  resourcePackage: com.hortonworks.registries.schemaregistry.webservice

#enable CORS, may want to disable in production
enableCors: true

#Set below 3 properties if server needs a proxy to connect. Useful to download mysql jar
#httpProxyUrl: "http://proxyHost:port"
#httpProxyUsername: "username"
#httpProxyPassword: "password"

server:
  applicationConnectors:
    - type: http
      port: 9090
  adminConnectors:
    - type: http
      port: 9091

# Logging settings.
logging:
  level: INFO
  loggers:
    com.hortonworks.registries: INFO

