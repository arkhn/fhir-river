"""Serializer for the full mapping.

These serializers add their child nested representations. Parent relation will be
deduced from the hierarchy. Some relations (to owners and columns) use an exported
primary key to make reference from other branch in the hierarchy.

    Usage example:

    from pyrog.api.serializers.import_export import SourceSerializer

On import, the Credential attribute should contain both login and password
and the Owner schema attribute is ignored if specified and always autogenerated.
If the source database connection fails, the mapping is not recorded.
"""

from typing import Mapping

from rest_framework import serializers

from common.adapters.fhir_api import fhir_api
from pagai.database_explorer.database_explorer import DatabaseExplorer
from pyrog.models import (
    Attribute,
    Column,
    Condition,
    Credential,
    Filter,
    InputGroup,
    Join,
    Owner,
    Resource,
    Source,
    SQLInput,
    StaticInput,
)
from river.common.database_connection.db_connection import DBConnection


class _ColumnField(serializers.PrimaryKeyRelatedField):
    """PKRelatedField with default deserialization overriden.

    The default deserialization looks for an object with given id (the ``data``) in DB.
    But here the id refers to another object, that lives elsewhere in the submitted data
    hierarchy (accessible from ``self.root.initial_data``).
    """

    queryset = Column.objects.all()

    def to_internal_value(self, data):
        """Find the actual representation in the submitted data, or raise."""

        for owner in self.root.initial_data["credential"]["owners"]:
            for column in owner["columns"]:
                if column["id"] == data:
                    return data
        raise serializers.ValidationError("No associated Column.")


class _OwnerField(serializers.PrimaryKeyRelatedField):
    """PKRelatedField with default deserialization overriden.

    Cf ``_ColumField``.
    """

    queryset = Owner.objects.all()

    def to_internal_value(self, data):
        """Find the actual representation in the submitted data, or raise."""

        for owner in self.root.initial_data["credential"]["owners"]:
            if owner["id"] == data:
                return data
        raise serializers.ValidationError("No associated Owner.")


class MappingJoinSerializer(serializers.ModelSerializer):
    left = _ColumnField()
    right = _ColumnField()

    class Meta:
        model = Join
        fields = ["left", "right"]


class MappingColumnSerializer(serializers.ModelSerializer):
    class Meta:
        model = Column
        fields = ["id", "table", "column"]
        extra_kwargs = {"id": {"read_only": False}}  # Put `id` in validated data


class MappingOwnerSerializer(serializers.ModelSerializer):
    columns = MappingColumnSerializer(many=True, required=False, default=[])

    class Meta:
        model = Owner
        fields = ["id", "name", "columns"]
        extra_kwargs = {"id": {"read_only": False}}  # Put `id` in validated data

    def to_internal_value(self, data):
        credential = self.root.initial_data["credential"]
        try:
            db_connection = DBConnection(credential)
            explorer = DatabaseExplorer(db_connection)
            name = data["name"]
            data["schema"] = explorer.get_owner_schema(name)
        except Exception as e:
            raise serializers.ValidationError(e)
        return super().to_internal_value(data)


class MappingPartialCredentialSerializer(serializers.ModelSerializer):
    owners = MappingOwnerSerializer(many=True, required=False, default=[])

    class Meta:
        model = Credential
        fields = ["host", "port", "database", "model", "owners"]


class MappingCredentialSerializer(MappingPartialCredentialSerializer):
    class Meta(MappingPartialCredentialSerializer.Meta):
        fields = MappingPartialCredentialSerializer.Meta.fields + ["login", "password"]

    def validate(self, data):
        try:
            db_connection = DBConnection(data).engine.connect()
            db_connection.close()
        except Exception as e:
            raise serializers.ValidationError(e)
        return super().validate(data)


class MappingStaticInputSerializer(serializers.ModelSerializer):
    class Meta:
        model = StaticInput
        fields = ["value"]


class MappingSQLInputSerializer(serializers.ModelSerializer):
    column = _ColumnField(allow_null=True)
    joins = MappingJoinSerializer(many=True)

    class Meta:
        model = SQLInput
        fields = ["script", "concept_map_id", "column", "joins"]


class MappingConditionSerializer(serializers.ModelSerializer):
    sql_input = MappingSQLInputSerializer()

    class Meta:
        model = Condition
        fields = [
            "action",
            "sql_input",
            "value",
            "relation",
        ]


class MappingInputGroupSerializer(serializers.ModelSerializer):
    static_inputs = MappingStaticInputSerializer(many=True, required=False, default=[])
    sql_inputs = MappingSQLInputSerializer(many=True, required=False, default=[])
    conditions = MappingConditionSerializer(many=True, required=False, default=[])

    class Meta:
        model = InputGroup
        fields = ["id", "merging_script", "static_inputs", "sql_inputs", "conditions"]


class MappingAttributeSerializer(serializers.ModelSerializer):
    input_groups = MappingInputGroupSerializer(many=True, required=False, default=[])

    class Meta:
        model = Attribute
        fields = ["path", "slice_name", "definition_id", "input_groups"]


class MappingFilterSerializer(serializers.ModelSerializer):
    sql_input = MappingSQLInputSerializer()

    class Meta:
        model = Filter
        fields = ["relation", "value", "sql_input"]


class MappingResourceSerializer(serializers.ModelSerializer):
    primary_key_owner = _OwnerField()
    attributes = MappingAttributeSerializer(many=True, required=False, default=[])
    filters = MappingFilterSerializer(many=True, required=False, default=[])
    logical_reference = serializers.CharField()

    class Meta:
        model = Resource
        fields = [
            "id",
            "label",
            "primary_key_table",
            "primary_key_column",
            "definition_id",
            "definition",
            "logical_reference",
            "primary_key_owner",
            "attributes",
            "filters",
        ]

    def to_representation(self, instance):
        if not instance.definition:
            request = self.context.get("request")
            auth_token = request.session.get("oidc_access_token") if request else None
            instance.definition = fhir_api.retrieve("StructureDefinition", instance.definition_id, auth_token)
            instance.save()
        return super().to_representation(instance)


class MappingSerializer(serializers.ModelSerializer):
    resources = MappingResourceSerializer(many=True, required=False, default=[])
    credential = MappingCredentialSerializer()

    class Meta:
        model = Source
        exclude = ["users"]

    def create(self, validated_data):
        """Create Source and related models from the validated representation.

        The same pattern is applied hierarchically:
            * Pop data of interest from validated data,
            * Create models,
            * Apply to child representations.

        Owners and columns are created first and kept in registries. When crossing later
        references to owner or column objects, the associated models will be found with
        those registries.
        """

        resources_data = validated_data.pop("resources")
        credential_data = validated_data.pop("credential")
        owners_data = credential_data.pop("owners")

        source = Source.objects.create(**{**validated_data, "id": None})
        credential = Credential.objects.create(source=source, **credential_data)

        # Registries to track owner and column instances by their exported ids
        owner_by_id: Mapping[str, Owner] = {}
        column_by_id: Mapping[str, Column] = {}

        # First hierarchy
        for owner_data in owners_data:
            columns_data = owner_data.pop("columns")

            owner = Owner.objects.create(
                credential=credential,
                **{**owner_data, "id": None},  # Ignore provided `id` field
            )

            owner_by_id[owner_data["id"]] = owner

            for column_data in columns_data:
                column = Column.objects.create(
                    owner=owner,
                    **{**column_data, "id": None},  # Ignore provided `id` field
                )

                column_by_id[column_data["id"]] = column

        # Main hierarchy
        for resource_data in resources_data:
            filters_data = resource_data.pop("filters")
            attributes_data = resource_data.pop("attributes")
            owner_id = resource_data.pop("primary_key_owner")

            owner = owner_by_id[owner_id]
            resource = Resource.objects.create(primary_key_owner=owner, source=source, **{**resource_data, "id": None})

            for filter_data in filters_data:
                sql_input_data = filter_data.pop("sql_input")
                column_id = sql_input_data.pop("column")
                column = column_by_id[column_id]
                joins_data = sql_input_data.pop("joins")

                sql_input = SQLInput.objects.create(column=column, **sql_input_data)

                for join_data in joins_data:
                    left_col = column_by_id[join_data["left"]]
                    right_col = column_by_id[join_data["right"]]
                    Join.objects.create(sql_input=sql_input, left=left_col, right=right_col)

                Filter.objects.create(resource=resource, sql_input=sql_input, **filter_data)

            for attribute_data in attributes_data:
                input_groups_data = attribute_data.pop("input_groups")

                attribute = Attribute.objects.create(resource=resource, **attribute_data)

                for input_group_data in input_groups_data:
                    static_inputs_data = input_group_data.pop("static_inputs")
                    sql_inputs_data = input_group_data.pop("sql_inputs")
                    conditions_data = input_group_data.pop("conditions")
                    input_group = InputGroup.objects.create(attribute=attribute, **{**input_group_data, "id": None})

                    for static_input_data in static_inputs_data:
                        StaticInput.objects.create(input_group=input_group, **static_input_data)

                    for sql_input_data in sql_inputs_data:
                        column_id = sql_input_data.pop("column")
                        column = column_by_id[column_id]
                        joins_data = sql_input_data.pop("joins")

                        sql_input = SQLInput.objects.create(input_group=input_group, column=column, **sql_input_data)

                        for join_data in joins_data:
                            left_col = column_by_id[join_data["left"]]
                            right_col = column_by_id[join_data["right"]]
                            Join.objects.create(sql_input=sql_input, left=left_col, right=right_col)

                    for condition_data in conditions_data:
                        sql_input_data = condition_data.pop("sql_input")
                        column_id = sql_input_data.pop("column")
                        column = column_by_id[column_id]
                        joins_data = sql_input_data.pop("joins")

                        sql_input = SQLInput.objects.create(column=column, **sql_input_data)

                        for join_data in joins_data:
                            left_col = column_by_id[join_data["left"]]
                            right_col = column_by_id[join_data["right"]]
                            Join.objects.create(sql_input=sql_input, left=left_col, right=right_col)

                        Condition.objects.create(input_group=input_group, sql_input=sql_input, **condition_data)

        return source


class MappingWithPartialCredentialSerializer(MappingSerializer):
    credential = MappingPartialCredentialSerializer()
