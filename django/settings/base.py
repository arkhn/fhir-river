"""
Django settings.

Generated by 'django-admin startproject' using Django 3.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import os
from distutils.util import strtobool
from pathlib import Path


def get_env_array_value(key: str, default: list = list):
    return os.environ.get(key) and os.environ.get(key).split(",") or default or []


def get_env_bool_value(key: str, default: bool):
    return os.environ.get(key) and bool(strtobool(os.environ.get(key).lower())) or default


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

# API versioning
VERSION_NAME = os.environ.get("VERSION_NAME", None)
VERSION_SHA = os.environ.get("VERSION_SHA", None)

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG modifies the app behaviour. For instance:
#   * it enables detailed error pages.
#   * it disables security checks (e.g. authorizes empty ALLOWED_HOSTS)
DEBUG = get_env_bool_value("DEBUG", default=False)

# https://docs.djangoproject.com/en/3.2/ref/settings/#use-x-forwarded-host
# Behind a proxy, use the actual host as defined by the proxy. This is needed to
# properly build urls.
USE_X_FORWARDED_HOST = get_env_bool_value("USE_X_FORWARDED_HOST", default=False)

ALLOWED_HOSTS = get_env_array_value("ALLOWED_HOSTS", default=[])

ADMIN_ENABLED = get_env_bool_value("ADMIN_ENABLED", False)

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # 3rd parties
    "drf_spectacular",
    "rest_framework",
    "corsheaders",
    "django_filters",
    "mozilla_django_oidc",
    "revproxy",
    "sentry",
    # 1st parties
    "core",
    "pagai",
    "pyrog",
    "river",
    "users",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    # Redirect requests to silently re-authenticated:
    "mozilla_django_oidc.middleware.SessionRefresh",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": os.environ.get("POSTGRES_DB", "river"),
        "USER": os.environ.get("POSTGRES_USER", "river"),
        "PASSWORD": os.environ.get("POSTGRES_PASSWORD"),
        "HOST": os.environ.get("POSTGRES_HOST"),
        "PORT": int(os.environ.get("POSTGRES_PORT", 5432)),
    }
}


# Custom User model
# https://docs.djangoproject.com/en/3.1/topics/auth/customizing/#substituting-a-custom-user-model

AUTH_USER_MODEL = "users.User"

# Auth backends
# https://docs.djangoproject.com/en/3.1/topics/auth/customizing/#specifying-authentication-backends

AUTHENTICATION_BACKENDS = (
    []
    if get_env_bool_value("DISABLE_AUTH", False)
    else [
        "mozilla_django_oidc.auth.OIDCAuthenticationBackend",
        "django.contrib.auth.backends.ModelBackend",
    ]
)

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Europe/Paris"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = os.environ.get("STATIC_URL", "/static/")
STATIC_ROOT = Path(os.environ.get("STATIC_ROOT", "var/www/static"))


# Logging
# https://docs.djangoproject.com/en/3.1/topics/logging/

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "default": {
            "format": "{asctime} [{levelname:>8}] {filename:>15}:{lineno:3d} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "default",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": os.environ.get("LOG_LEVEL", "INFO"),
    },
}

# CorsHeaders
# Used to access api from third-party domain

CORS_ALLOWED_ORIGINS = get_env_array_value("CORS_ALLOWED_ORIGINS", default=[])
CORS_ALLOW_ALL_ORIGINS = get_env_bool_value("CORS_ALLOW_ALL_ORIGINS", default=False)
CORS_URLS_REGEX = r"^\/(api|oidc)\/.*$"
CORS_ALLOW_CREDENTIALS = get_env_bool_value("CORS_ALLOW_CREDENTIALS", default=False)

# Rest Framework
# https://www.django-rest-framework.org/api-guide/settings/

_DEFAULT_RENDERER_CLASSES = get_env_array_value(
    "RF_DEFAULT_RENDERER_CLASSES", default=["rest_framework.renderers.JSONRenderer"]
)

_DEFAULT_PERMISSION_CLASSES = get_env_array_value(
    "RF_DEFAULT_PERMISSION_CLASSES", default=["rest_framework.permissions.IsAuthenticated"]
)

REST_FRAMEWORK = {
    "DEFAULT_RENDERER_CLASSES": _DEFAULT_RENDERER_CLASSES,
    "DEFAULT_PERMISSION_CLASSES": _DEFAULT_PERMISSION_CLASSES,
}

# Sessions
# https://docs.djangoproject.com/en/3.2/ref/settings/#sessions

# Namespace cookie names to prevent clashes when working behind a proxy which
# serves multiple services.
SESSION_COOKIE_NAME = os.environ.get("SESSION_COOKIE_NAME", "pyrog_sessionid")

# CSRF

CSRF_COOKIE_NAME = os.environ.get("CSRF_COOKIE_NAME", "pyrog_csrftoken")


# Redis

REDIS_HOST = os.environ.get("REDIS_HOST", "redis")
REDIS_PORT = int(os.environ.get("REDIS_PORT", 6379))
REDIS_DB = int(os.environ.get("REDIS_DB", 0))

# Kafka

KAFKA_BOOTSTRAP_SERVERS = os.environ.get("KAFKA_BOOTSTRAP_SERVERS", "kafka:9092")
KAFKA_NUM_PARTITIONS = int(os.environ.get("KAFKA_NUM_PARTITIONS", 1))
KAFKA_REPLICATION_FACTOR = int(os.environ.get("KAFKA_REPLICATION_FACTOR", 1))
KAFKA_SUBSCRIBER_MAX_POLL_INTERVAL = int(os.environ.get("KAFKA_SUBSCRIBER_MAX_POLL_INTERVAL", 15 * 60 * 1000))

# API URLs

PYROG_API_URL = os.environ.get("PYROG_API_URL", "http://pyrog-server:1000")
FHIR_API_URL = os.environ.get("FHIR_API_URL", "http://fhir-api:2000")

# Prometheus

EXPORTER_PORT = os.environ.get("EXPORTER_PORT", 8001)

# Mozilla OpenID Connect
# https://mozilla-django-oidc.readthedocs.io/en/stable/settings.html

OIDC_STORE_ID_TOKEN = True
OIDC_STORE_ACCESS_TOKEN = True
# Silently re-authenticated after following time:
OIDC_RENEW_ID_TOKEN_EXPIRY_SECONDS = int(os.environ.get("OIDC_RENEW_ID_TOKEN_EXPIRY_SECONDS", 12 * 60 * 60))
# Enable HTTP Basic Authorization method:
# the OAuth 2.0 Client ID and secret are sent in the HTTP Header
OIDC_TOKEN_USE_BASIC_AUTH = os.environ.get("OIDC_TOKEN_USE_BASIC_AUTH", False) == "True"

# Relying party
OIDC_RP_CLIENT_ID = os.environ.get("OIDC_RP_CLIENT_ID")
OIDC_RP_CLIENT_SECRET = os.environ.get("OIDC_RP_CLIENT_SECRET")
OIDC_RP_EXTRA_SCOPES = os.environ.get("OIDC_RP_EXTRA_SCOPES", "").replace(",", " ").split(" ")
OIDC_RP_SCOPES = " ".join(["openid", *OIDC_RP_EXTRA_SCOPES])
OIDC_RP_SIGN_ALGO = os.environ.get("OIDC_RP_SIGN_ALGO")

LOGIN_REDIRECT_URL = os.environ.get("LOGIN_REDIRECT_URL")
LOGIN_REDIRECT_URL_FAILURE = os.environ.get("LOGIN_REDIRECT_URL_FAILURE")
LOGOUT_REDIRECT_URL = os.environ.get("LOGOUT_REDIRECT_URL")

# Provider
OIDC_OP_AUTHORIZATION_ENDPOINT = os.environ.get("OIDC_OP_AUTHORIZATION_ENDPOINT")
OIDC_OP_TOKEN_ENDPOINT = os.environ.get("OIDC_OP_TOKEN_ENDPOINT")
OIDC_OP_USER_ENDPOINT = os.environ.get("OIDC_OP_USER_ENDPOINT")
OIDC_OP_LOGOUT_ENDPOINT = os.environ.get("OIDC_OP_LOGOUT_ENDPOINT")
OIDC_OP_LOGOUT_URL_METHOD = os.environ.get("OIDC_OP_LOGOUT_URL_METHOD", "utils.auth.logout")

if OIDC_RP_SIGN_ALGO == "RS256":
    OIDC_OP_JWKS_ENDPOINT = os.environ.get("OIDC_OP_JWKS_ENDPOINT")
elif OIDC_RP_SIGN_ALGO == "HS256":
    pass

# Sentry

SENTRY_ENABLED = get_env_bool_value("SENTRY_ENABLED", False)

if SENTRY_ENABLED:
    SENTRY = {
        "DSN": os.environ.get("SENTRY_DSN"),
        "ENV": os.environ.get("SENTRY_ENVIRONMENT"),
        "RELEASE": os.environ.get("SENTRY_RELEASE", VERSION_NAME or VERSION_SHA),
    }

# DRF Spectacular settings

REST_FRAMEWORK["DEFAULT_SCHEMA_CLASS"] = "drf_spectacular.openapi.AutoSchema"

SPECTACULAR_SETTINGS = {
    "POSTPROCESSING_HOOKS": [
        "drf_spectacular.hooks.postprocess_schema_enums",
    ],
    "ENUM_NAME_OVERRIDES": {
        "FilterRelationEnum": "pyrog.models.Filter.Relation",
        "ConditionRelationEnum": "pyrog.models.Condition.Relation",
    },
    "COMPONENT_SPLIT_REQUEST": True,
    "TITLE": "River API",
    "DESCRIPTION": "Arkhn's River API",
    "VERSION": "0.1.0",
}
