openapi: 3.0.3
info:
  title: River API
  version: 0.1.0
  description: Arkhn's River API
paths:
  /api/attributes/:
    get:
      operationId: api_attributes_list
      description: ''
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - in: query
        name: path
        schema:
          type: string
      - in: query
        name: resource
        schema:
          type: string
      - in: query
        name: source
        schema:
          type: string
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Attribute'
          description: ''
    post:
      operationId: api_attributes_create
      description: ''
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributeRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AttributeRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AttributeRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attribute'
          description: ''
  /api/attributes/{id}/:
    get:
      operationId: api_attributes_retrieve
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this attribute.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attribute'
          description: ''
    put:
      operationId: api_attributes_update
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this attribute.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributeRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AttributeRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AttributeRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attribute'
          description: ''
    patch:
      operationId: api_attributes_partial_update
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this attribute.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedAttributeRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedAttributeRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedAttributeRequest'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attribute'
          description: ''
    delete:
      operationId: api_attributes_destroy
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this attribute.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/batches/:
    get:
      operationId: api_batches_list
      description: ''
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBatchList'
          description: ''
    post:
      operationId: api_batches_create
      description: ''
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BatchRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BatchRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Batch'
          description: ''
  /api/batches/{id}/:
    get:
      operationId: api_batches_retrieve
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this batch.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Batch'
          description: ''
    put:
      operationId: api_batches_update
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this batch.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BatchRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BatchRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Batch'
          description: ''
    patch:
      operationId: api_batches_partial_update
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this batch.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBatchRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBatchRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBatchRequest'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Batch'
          description: ''
    delete:
      operationId: api_batches_destroy
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this batch.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/batches/{id}/retry/:
    post:
      operationId: api_batches_retry_create
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this batch.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BatchRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BatchRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Batch'
          description: ''
  /api/columns/:
    get:
      operationId: api_columns_list
      description: ''
      parameters:
      - in: query
        name: input
        schema:
          type: string
      - in: query
        name: join
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Column'
          description: ''
    post:
      operationId: api_columns_create
      description: ''
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ColumnRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ColumnRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ColumnRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Column'
          description: ''
  /api/columns/{id}/:
    get:
      operationId: api_columns_retrieve
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this column.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Column'
          description: ''
    put:
      operationId: api_columns_update
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this column.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ColumnRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ColumnRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ColumnRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Column'
          description: ''
    patch:
      operationId: api_columns_partial_update
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this column.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedColumnRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedColumnRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedColumnRequest'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Column'
          description: ''
    delete:
      operationId: api_columns_destroy
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this column.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/conditions/:
    get:
      operationId: api_conditions_list
      description: ''
      parameters:
      - in: query
        name: input_group
        schema:
          type: string
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Condition'
          description: ''
    post:
      operationId: api_conditions_create
      description: ''
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConditionRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ConditionRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ConditionRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Condition'
          description: ''
  /api/conditions/{id}/:
    get:
      operationId: api_conditions_retrieve
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this condition.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Condition'
          description: ''
    put:
      operationId: api_conditions_update
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this condition.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConditionRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ConditionRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ConditionRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Condition'
          description: ''
    patch:
      operationId: api_conditions_partial_update
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this condition.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedConditionRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedConditionRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedConditionRequest'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Condition'
          description: ''
    delete:
      operationId: api_conditions_destroy
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this condition.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/core/version/:
    get:
      operationId: api_core_version_retrieve
      description: Return the version of the application
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/credentials/:
    get:
      operationId: api_credentials_list
      description: ''
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - in: query
        name: source
        schema:
          type: string
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Credential'
          description: ''
    post:
      operationId: api_credentials_create
      description: ''
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CredentialRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CredentialRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credential'
          description: ''
  /api/credentials/{id}/:
    get:
      operationId: api_credentials_retrieve
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this credential.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credential'
          description: ''
    put:
      operationId: api_credentials_update
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this credential.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CredentialRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CredentialRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credential'
          description: ''
    patch:
      operationId: api_credentials_partial_update
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this credential.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCredentialRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCredentialRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCredentialRequest'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credential'
          description: ''
    delete:
      operationId: api_credentials_destroy
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this credential.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/filters/:
    get:
      operationId: api_filters_list
      description: ''
      parameters:
      - in: query
        name: resource
        schema:
          type: string
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Filter'
          description: ''
    post:
      operationId: api_filters_create
      description: ''
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FilterRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FilterRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Filter'
          description: ''
  /api/filters/{id}/:
    get:
      operationId: api_filters_retrieve
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this filter.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Filter'
          description: ''
    put:
      operationId: api_filters_update
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this filter.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FilterRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FilterRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Filter'
          description: ''
    patch:
      operationId: api_filters_partial_update
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this filter.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedFilterRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedFilterRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedFilterRequest'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Filter'
          description: ''
    delete:
      operationId: api_filters_destroy
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this filter.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/input-groups/:
    get:
      operationId: api_input_groups_list
      description: ''
      parameters:
      - in: query
        name: attribute
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InputGroup'
          description: ''
    post:
      operationId: api_input_groups_create
      description: ''
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputGroupRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/InputGroupRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/InputGroupRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputGroup'
          description: ''
  /api/input-groups/{id}/:
    get:
      operationId: api_input_groups_retrieve
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this input group.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputGroup'
          description: ''
    put:
      operationId: api_input_groups_update
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this input group.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputGroupRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/InputGroupRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/InputGroupRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputGroup'
          description: ''
    patch:
      operationId: api_input_groups_partial_update
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this input group.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedInputGroupRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedInputGroupRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedInputGroupRequest'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputGroup'
          description: ''
    delete:
      operationId: api_input_groups_destroy
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this input group.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/inputs/:
    get:
      operationId: api_inputs_list
      description: ''
      parameters:
      - in: query
        name: input_group
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Input'
          description: ''
    post:
      operationId: api_inputs_create
      description: ''
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/InputRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/InputRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Input'
          description: ''
  /api/inputs/{id}/:
    get:
      operationId: api_inputs_retrieve
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this input.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Input'
          description: ''
    put:
      operationId: api_inputs_update
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this input.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/InputRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/InputRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Input'
          description: ''
    patch:
      operationId: api_inputs_partial_update
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this input.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedInputRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedInputRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedInputRequest'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Input'
          description: ''
    delete:
      operationId: api_inputs_destroy
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this input.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/joins/:
    get:
      operationId: api_joins_list
      description: ''
      parameters:
      - in: query
        name: column
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Join'
          description: ''
    post:
      operationId: api_joins_create
      description: ''
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JoinRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/JoinRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/JoinRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Join'
          description: ''
  /api/joins/{id}/:
    get:
      operationId: api_joins_retrieve
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this join.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Join'
          description: ''
    put:
      operationId: api_joins_update
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this join.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JoinRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/JoinRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/JoinRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Join'
          description: ''
    patch:
      operationId: api_joins_partial_update
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this join.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedJoinRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedJoinRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedJoinRequest'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Join'
          description: ''
    delete:
      operationId: api_joins_destroy
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this join.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/owners/:
    get:
      operationId: api_owners_list
      description: ''
      parameters:
      - in: query
        name: credential
        schema:
          type: string
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Owner'
          description: ''
    post:
      operationId: api_owners_create
      description: ''
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OwnerRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OwnerRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OwnerRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Owner'
          description: ''
  /api/owners/{id}/:
    get:
      operationId: api_owners_retrieve
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this owner.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Owner'
          description: ''
    put:
      operationId: api_owners_update
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this owner.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OwnerRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OwnerRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OwnerRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Owner'
          description: ''
    patch:
      operationId: api_owners_partial_update
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this owner.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedOwnerRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedOwnerRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedOwnerRequest'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Owner'
          description: ''
    delete:
      operationId: api_owners_destroy
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this owner.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/preview/:
    post:
      operationId: api_preview_create
      description: ''
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PreviewRequestRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PreviewRequestRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PreviewRequestRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreviewResponse'
          description: ''
  /api/resources/:
    get:
      operationId: api_resources_list
      description: ''
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - in: query
        name: source
        schema:
          type: string
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Resource'
          description: ''
    post:
      operationId: api_resources_create
      description: ''
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResourceRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResourceRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
          description: ''
  /api/resources/{id}/:
    get:
      operationId: api_resources_retrieve
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this resource.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
          description: ''
    put:
      operationId: api_resources_update
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this resource.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResourceRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResourceRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
          description: ''
    patch:
      operationId: api_resources_partial_update
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this resource.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedResourceRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedResourceRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedResourceRequest'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
          description: ''
    delete:
      operationId: api_resources_destroy
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this resource.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/scripts/:
    get:
      operationId: api_scripts_list
      description: ''
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Scripts'
          description: ''
  /api/sources/:
    get:
      operationId: api_sources_list
      description: ''
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Source'
          description: ''
    post:
      operationId: api_sources_create
      description: ''
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SourceRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SourceRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SourceRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
          description: ''
  /api/sources/{id}/:
    get:
      operationId: api_sources_retrieve
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this source.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
          description: ''
    put:
      operationId: api_sources_update
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this source.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SourceRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SourceRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SourceRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
          description: ''
    patch:
      operationId: api_sources_partial_update
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this source.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSourceRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSourceRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSourceRequest'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
          description: ''
    delete:
      operationId: api_sources_destroy
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this source.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/sources/{id}/export/:
    get:
      operationId: api_sources_export_retrieve
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this source.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MappingWithPartialCredentialModel'
          description: ''
  /api/sources/import/:
    post:
      operationId: api_sources_import_create
      description: ''
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MappingModelRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MappingModelRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MappingModelRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MappingModel'
          description: ''
  /api/user/:
    get:
      operationId: api_user_retrieve
      description: ''
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /pagai/explore/:
    post:
      operationId: pagai_explore_create
      description: ''
      tags:
      - pagai
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExplorationRequestRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ExplorationRequestRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ExplorationRequestRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExplorationResponse'
          description: ''
  /pagai/list-owners/:
    post:
      operationId: pagai_list_owners_create
      description: ''
      tags:
      - pagai
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /pagai/owner-schema/{owner}/:
    post:
      operationId: pagai_owner_schema_create
      description: ''
      parameters:
      - in: path
        name: owner
        schema:
          type: string
        required: true
      tags:
      - pagai
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
components:
  schemas:
    ActionEnum:
      enum:
      - INCLUDE
      - EXCLUDE
      type: string
    Attribute:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        path:
          type: string
        slice_name:
          type: string
        definition_id:
          type: string
        updated_at:
          type: string
          format: date-time
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        resource:
          type: string
      required:
      - created_at
      - definition_id
      - id
      - path
      - resource
      - updated_at
    AttributeRequest:
      type: object
      properties:
        path:
          type: string
        slice_name:
          type: string
        definition_id:
          type: string
        resource:
          type: string
      required:
      - definition_id
      - path
      - resource
    Batch:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
          readOnly: true
        mappings:
          $ref: '#/components/schemas/Mapping'
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        deleted_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - deleted_at
      - errors
      - id
      - mappings
      - updated_at
    BatchRequest:
      type: object
      properties:
        mappings:
          $ref: '#/components/schemas/MappingRequest'
      required:
      - mappings
    Column:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        table:
          type: string
        column:
          type: string
        updated_at:
          type: string
          format: date-time
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        join:
          type: string
          nullable: true
        input:
          type: string
          nullable: true
        owner:
          type: string
      required:
      - column
      - created_at
      - id
      - owner
      - table
      - updated_at
    ColumnRequest:
      type: object
      properties:
        table:
          type: string
        column:
          type: string
        join:
          type: string
          nullable: true
        input:
          type: string
          nullable: true
        owner:
          type: string
      required:
      - column
      - owner
      - table
    Condition:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        action:
          $ref: '#/components/schemas/ActionEnum'
        value:
          type: string
        relation:
          $ref: '#/components/schemas/ConditionRelationEnum'
        column:
          type: string
        input_group:
          type: string
      required:
      - action
      - column
      - id
      - input_group
    ConditionRelationEnum:
      enum:
      - EQ
      - GT
      - GE
      - LT
      - LE
      - NOTNULL
      - 'NULL'
      type: string
    ConditionRequest:
      type: object
      properties:
        action:
          $ref: '#/components/schemas/ActionEnum'
        value:
          type: string
        relation:
          $ref: '#/components/schemas/ConditionRelationEnum'
        column:
          type: string
        input_group:
          type: string
      required:
      - action
      - column
      - input_group
    Credential:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        available_owners:
          type: array
          items:
            type: string
          readOnly: true
        host:
          type: string
        port:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        database:
          type: string
        login:
          type: string
        password:
          type: string
        model:
          $ref: '#/components/schemas/ModelEnum'
        updated_at:
          type: string
          format: date-time
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        source:
          type: string
      required:
      - available_owners
      - created_at
      - database
      - host
      - id
      - login
      - model
      - password
      - port
      - source
      - updated_at
    CredentialRequest:
      type: object
      properties:
        host:
          type: string
        port:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        database:
          type: string
        login:
          type: string
        password:
          type: string
        model:
          $ref: '#/components/schemas/ModelEnum'
        source:
          type: string
      required:
      - database
      - host
      - login
      - model
      - password
      - port
      - source
    Error:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        event:
          type: string
        message:
          type: string
        exception:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        deleted_at:
          type: string
          format: date-time
          readOnly: true
        batch:
          type: string
      required:
      - batch
      - created_at
      - deleted_at
      - event
      - id
      - message
      - updated_at
    ErrorRequest:
      type: object
      properties:
        event:
          type: string
        message:
          type: string
        exception:
          type: string
        batch:
          type: string
      required:
      - batch
      - event
      - message
    ExplorationRequestRequest:
      type: object
      properties:
        resource_id:
          type: string
        mapping:
          $ref: '#/components/schemas/MappingRequest'
        owner:
          type: string
        table:
          type: string
      required:
      - mapping
      - owner
      - resource_id
      - table
    ExplorationResponse:
      type: object
      properties:
        fields:
          type: array
          items:
            type: string
        rows:
          type: array
          items:
            type: array
            items:
              type: string
      required:
      - fields
      - rows
    Filter:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        relation:
          $ref: '#/components/schemas/FilterRelationEnum'
        value:
          type: string
        resource:
          type: string
        sql_column:
          type: string
      required:
      - id
      - relation
      - resource
      - sql_column
    FilterRelationEnum:
      enum:
      - '='
      - <>
      - IN
      - '>'
      - '>='
      - <
      - <=
      type: string
    FilterRequest:
      type: object
      properties:
        relation:
          $ref: '#/components/schemas/FilterRelationEnum'
        value:
          type: string
        resource:
          type: string
        sql_column:
          type: string
      required:
      - relation
      - resource
      - sql_column
    Input:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        script:
          type: string
        concept_map_id:
          type: string
        static_value:
          type: string
          nullable: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        input_group:
          type: string
      required:
      - created_at
      - id
      - input_group
      - updated_at
    InputGroup:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        merging_script:
          type: string
        updated_at:
          type: string
          format: date-time
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        attribute:
          type: string
      required:
      - attribute
      - created_at
      - id
      - updated_at
    InputGroupRequest:
      type: object
      properties:
        merging_script:
          type: string
        attribute:
          type: string
      required:
      - attribute
    InputRequest:
      type: object
      properties:
        script:
          type: string
        concept_map_id:
          type: string
        static_value:
          type: string
          nullable: true
        input_group:
          type: string
      required:
      - input_group
    Join:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        column:
          type: string
      required:
      - column
      - created_at
      - id
      - updated_at
    JoinRequest:
      type: object
      properties:
        column:
          type: string
      required:
      - column
    Mapping:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        version:
          type: string
        resources:
          type: array
          items:
            $ref: '#/components/schemas/_Resource'
          default: []
        credential:
          $ref: '#/components/schemas/_Credential'
        users:
          type: array
          items:
            $ref: '#/components/schemas/_User'
          default: []
        updated_at:
          type: string
        created_at:
          type: string
      required:
      - created_at
      - credential
      - id
      - name
      - updated_at
      - version
    MappingModel:
      type: object
      properties:
        id:
          type: string
        resources:
          type: array
          items:
            $ref: '#/components/schemas/_ResourceModel'
          default: []
        credential:
          $ref: '#/components/schemas/_CredentialModel'
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
          default: []
        name:
          type: string
        version:
          type: string
        updated_at:
          type: string
          format: date-time
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - credential
      - id
      - name
      - updated_at
    MappingModelRequest:
      type: object
      properties:
        id:
          type: string
        resources:
          type: array
          items:
            $ref: '#/components/schemas/_ResourceModelRequest'
          default: []
        credential:
          $ref: '#/components/schemas/_CredentialModelRequest'
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserRequest'
          default: []
        name:
          type: string
        version:
          type: string
      required:
      - credential
      - id
      - name
    MappingRequest:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        version:
          type: string
        resources:
          type: array
          items:
            $ref: '#/components/schemas/_ResourceRequest'
          default: []
        credential:
          $ref: '#/components/schemas/_CredentialRequest'
        users:
          type: array
          items:
            $ref: '#/components/schemas/_UserRequest'
          default: []
        updated_at:
          type: string
        created_at:
          type: string
      required:
      - created_at
      - credential
      - id
      - name
      - updated_at
      - version
    MappingWithPartialCredentialModel:
      type: object
      properties:
        id:
          type: string
        resources:
          type: array
          items:
            $ref: '#/components/schemas/_ResourceModel'
          default: []
        credential:
          $ref: '#/components/schemas/_PartialCredentialModel'
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
          default: []
        name:
          type: string
        version:
          type: string
        updated_at:
          type: string
          format: date-time
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - credential
      - id
      - name
      - updated_at
    ModelEnum:
      enum:
      - MSSQL
      - POSTGRES
      - ORACLE
      - SQLLITE
      type: string
    Owner:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        name:
          type: string
        schema:
          type: object
          additionalProperties: {}
          readOnly: true
        credential:
          type: string
      required:
      - credential
      - id
      - name
      - schema
    OwnerRequest:
      type: object
      properties:
        name:
          type: string
        credential:
          type: string
      required:
      - credential
      - name
    PaginatedBatchList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Batch'
    PatchedAttributeRequest:
      type: object
      properties:
        path:
          type: string
        slice_name:
          type: string
        definition_id:
          type: string
        resource:
          type: string
    PatchedBatchRequest:
      type: object
      properties:
        mappings:
          $ref: '#/components/schemas/MappingRequest'
    PatchedColumnRequest:
      type: object
      properties:
        table:
          type: string
        column:
          type: string
        join:
          type: string
          nullable: true
        input:
          type: string
          nullable: true
        owner:
          type: string
    PatchedConditionRequest:
      type: object
      properties:
        action:
          $ref: '#/components/schemas/ActionEnum'
        value:
          type: string
        relation:
          $ref: '#/components/schemas/ConditionRelationEnum'
        column:
          type: string
        input_group:
          type: string
    PatchedCredentialRequest:
      type: object
      properties:
        host:
          type: string
        port:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        database:
          type: string
        login:
          type: string
        password:
          type: string
        model:
          $ref: '#/components/schemas/ModelEnum'
        source:
          type: string
    PatchedFilterRequest:
      type: object
      properties:
        relation:
          $ref: '#/components/schemas/FilterRelationEnum'
        value:
          type: string
        resource:
          type: string
        sql_column:
          type: string
    PatchedInputGroupRequest:
      type: object
      properties:
        merging_script:
          type: string
        attribute:
          type: string
    PatchedInputRequest:
      type: object
      properties:
        script:
          type: string
        concept_map_id:
          type: string
        static_value:
          type: string
          nullable: true
        input_group:
          type: string
    PatchedJoinRequest:
      type: object
      properties:
        column:
          type: string
    PatchedOwnerRequest:
      type: object
      properties:
        name:
          type: string
        credential:
          type: string
    PatchedResourceRequest:
      type: object
      properties:
        label:
          type: string
        primary_key_table:
          type: string
        primary_key_column:
          type: string
        definition_id:
          type: string
        source:
          type: string
        primary_key_owner:
          type: string
    PatchedSourceRequest:
      type: object
      properties:
        name:
          type: string
        version:
          type: string
    PreviewRequestRequest:
      type: object
      properties:
        mapping:
          $ref: '#/components/schemas/MappingRequest'
        primary_key_values:
          type: array
          items:
            type: string
      required:
      - mapping
      - primary_key_values
    PreviewResponse:
      type: object
      properties:
        instances:
          type: array
          items:
            type: object
            additionalProperties: {}
        errors:
          type: array
          items:
            type: string
      required:
      - errors
      - instances
    Resource:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        label:
          type: string
        primary_key_table:
          type: string
        primary_key_column:
          type: string
        definition_id:
          type: string
        logical_reference:
          type: string
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        source:
          type: string
        primary_key_owner:
          type: string
      required:
      - created_at
      - definition_id
      - id
      - logical_reference
      - primary_key_column
      - primary_key_owner
      - primary_key_table
      - source
      - updated_at
    ResourceRequest:
      type: object
      properties:
        label:
          type: string
        primary_key_table:
          type: string
        primary_key_column:
          type: string
        definition_id:
          type: string
        source:
          type: string
        primary_key_owner:
          type: string
      required:
      - definition_id
      - primary_key_column
      - primary_key_owner
      - primary_key_table
      - source
    Scripts:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        category:
          type: string
      required:
      - category
      - description
      - name
    Source:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        name:
          type: string
        version:
          type: string
        updated_at:
          type: string
          format: date-time
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        users:
          type: array
          items:
            type: string
          readOnly: true
      required:
      - created_at
      - id
      - name
      - updated_at
      - users
    SourceRequest:
      type: object
      properties:
        name:
          type: string
        version:
          type: string
      required:
      - name
    User:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 254
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
      required:
      - email
      - id
      - username
    UserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          maxLength: 254
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
      required:
      - email
      - username
    _Attribute:
      type: object
      properties:
        path:
          type: string
        slice_name:
          type: string
        definition_id:
          type: string
        input_groups:
          type: array
          items:
            $ref: '#/components/schemas/_InputGroup'
          default: []
      required:
      - definition_id
      - path
      - slice_name
    _AttributeModel:
      type: object
      properties:
        path:
          type: string
        slice_name:
          type: string
        definition_id:
          type: string
        input_groups:
          type: array
          items:
            $ref: '#/components/schemas/_InputGroupModel'
          default: []
      required:
      - definition_id
      - path
    _AttributeModelRequest:
      type: object
      properties:
        path:
          type: string
        slice_name:
          type: string
        definition_id:
          type: string
        input_groups:
          type: array
          items:
            $ref: '#/components/schemas/_InputGroupModelRequest'
          default: []
      required:
      - definition_id
      - path
    _AttributeRequest:
      type: object
      properties:
        path:
          type: string
        slice_name:
          type: string
        definition_id:
          type: string
        input_groups:
          type: array
          items:
            $ref: '#/components/schemas/_InputGroupRequest'
          default: []
      required:
      - definition_id
      - path
      - slice_name
    _Column:
      type: object
      properties:
        id:
          type: string
        table:
          type: string
        column:
          type: string
        joins:
          type: array
          items:
            $ref: '#/components/schemas/_Join'
          default: []
      required:
      - column
      - id
      - table
    _ColumnModel:
      type: object
      properties:
        id:
          type: string
        table:
          type: string
        column:
          type: string
        joins:
          type: array
          items:
            $ref: '#/components/schemas/_JoinModel'
          default: []
      required:
      - column
      - id
      - table
    _ColumnModelRequest:
      type: object
      properties:
        id:
          type: string
        table:
          type: string
        column:
          type: string
        joins:
          type: array
          items:
            $ref: '#/components/schemas/_JoinModelRequest'
          default: []
      required:
      - column
      - id
      - table
    _ColumnRequest:
      type: object
      properties:
        id:
          type: string
        table:
          type: string
        column:
          type: string
        joins:
          type: array
          items:
            $ref: '#/components/schemas/_JoinRequest'
          default: []
      required:
      - column
      - id
      - table
    _Condition:
      type: object
      properties:
        action:
          $ref: '#/components/schemas/ActionEnum'
        column:
          type: string
        value:
          type: string
        relation:
          $ref: '#/components/schemas/ConditionRelationEnum'
      required:
      - action
      - column
      - relation
      - value
    _ConditionModel:
      type: object
      properties:
        action:
          $ref: '#/components/schemas/ActionEnum'
        column:
          type: string
        value:
          type: string
        relation:
          $ref: '#/components/schemas/ConditionRelationEnum'
      required:
      - action
      - column
    _ConditionModelRequest:
      type: object
      properties:
        action:
          $ref: '#/components/schemas/ActionEnum'
        column:
          type: string
        value:
          type: string
        relation:
          $ref: '#/components/schemas/ConditionRelationEnum'
      required:
      - action
      - column
    _ConditionRequest:
      type: object
      properties:
        action:
          $ref: '#/components/schemas/ActionEnum'
        column:
          type: string
        value:
          type: string
        relation:
          $ref: '#/components/schemas/ConditionRelationEnum'
      required:
      - action
      - column
      - relation
      - value
    _Credential:
      type: object
      properties:
        host:
          type: string
        port:
          type: integer
        database:
          type: string
        model:
          $ref: '#/components/schemas/ModelEnum'
        owners:
          type: array
          items:
            $ref: '#/components/schemas/_Owner'
          default: []
        login:
          type: string
        password:
          type: string
      required:
      - database
      - host
      - login
      - model
      - password
      - port
    _CredentialModel:
      type: object
      properties:
        host:
          type: string
        port:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        database:
          type: string
        model:
          $ref: '#/components/schemas/ModelEnum'
        owners:
          type: array
          items:
            $ref: '#/components/schemas/_OwnerModel'
          default: []
        login:
          type: string
        password:
          type: string
      required:
      - database
      - host
      - login
      - model
      - password
      - port
    _CredentialModelRequest:
      type: object
      properties:
        host:
          type: string
        port:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        database:
          type: string
        model:
          $ref: '#/components/schemas/ModelEnum'
        owners:
          type: array
          items:
            $ref: '#/components/schemas/_OwnerModelRequest'
          default: []
        login:
          type: string
        password:
          type: string
      required:
      - database
      - host
      - login
      - model
      - password
      - port
    _CredentialRequest:
      type: object
      properties:
        host:
          type: string
        port:
          type: integer
        database:
          type: string
        model:
          $ref: '#/components/schemas/ModelEnum'
        owners:
          type: array
          items:
            $ref: '#/components/schemas/_OwnerRequest'
          default: []
        login:
          type: string
        password:
          type: string
      required:
      - database
      - host
      - login
      - model
      - password
      - port
    _Filter:
      type: object
      properties:
        relation:
          $ref: '#/components/schemas/FilterRelationEnum'
        value:
          type: string
        sql_column:
          type: string
      required:
      - relation
      - sql_column
      - value
    _FilterModel:
      type: object
      properties:
        relation:
          $ref: '#/components/schemas/FilterRelationEnum'
        value:
          type: string
        sql_column:
          type: string
      required:
      - relation
      - sql_column
    _FilterModelRequest:
      type: object
      properties:
        relation:
          $ref: '#/components/schemas/FilterRelationEnum'
        value:
          type: string
        sql_column:
          type: string
      required:
      - relation
      - sql_column
    _FilterRequest:
      type: object
      properties:
        relation:
          $ref: '#/components/schemas/FilterRelationEnum'
        value:
          type: string
        sql_column:
          type: string
      required:
      - relation
      - sql_column
      - value
    _Input:
      type: object
      properties:
        script:
          type: string
        concept_map_id:
          type: string
        concept_map:
          type: object
          additionalProperties: {}
        static_value:
          type: string
          nullable: true
        column:
          type: string
          nullable: true
      required:
      - column
      - concept_map_id
      - script
      - static_value
    _InputGroup:
      type: object
      properties:
        id:
          type: string
        merging_script:
          type: string
        inputs:
          type: array
          items:
            $ref: '#/components/schemas/_Input'
          default: []
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/_Condition'
          default: []
      required:
      - id
      - merging_script
    _InputGroupModel:
      type: object
      properties:
        id:
          type: string
        merging_script:
          type: string
        inputs:
          type: array
          items:
            $ref: '#/components/schemas/_InputModel'
          default: []
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/_ConditionModel'
          default: []
      required:
      - id
    _InputGroupModelRequest:
      type: object
      properties:
        id:
          type: string
        merging_script:
          type: string
        inputs:
          type: array
          items:
            $ref: '#/components/schemas/_InputModelRequest'
          default: []
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/_ConditionModelRequest'
          default: []
      required:
      - id
    _InputGroupRequest:
      type: object
      properties:
        id:
          type: string
        merging_script:
          type: string
        inputs:
          type: array
          items:
            $ref: '#/components/schemas/_InputRequest'
          default: []
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/_ConditionRequest'
          default: []
      required:
      - id
      - merging_script
    _InputModel:
      type: object
      properties:
        script:
          type: string
        concept_map_id:
          type: string
        static_value:
          type: string
          nullable: true
        column:
          type: string
          nullable: true
      required:
      - column
    _InputModelRequest:
      type: object
      properties:
        script:
          type: string
        concept_map_id:
          type: string
        static_value:
          type: string
          nullable: true
        column:
          type: string
          nullable: true
      required:
      - column
    _InputRequest:
      type: object
      properties:
        script:
          type: string
        concept_map_id:
          type: string
        concept_map:
          type: object
          additionalProperties: {}
        static_value:
          type: string
          nullable: true
        column:
          type: string
          nullable: true
      required:
      - column
      - concept_map_id
      - script
      - static_value
    _Join:
      type: object
      properties:
        columns:
          type: array
          items:
            type: string
      required:
      - columns
    _JoinModel:
      type: object
      properties:
        columns:
          type: array
          items:
            type: string
      required:
      - columns
    _JoinModelRequest:
      type: object
      properties:
        columns:
          type: array
          items:
            type: string
      required:
      - columns
    _JoinRequest:
      type: object
      properties:
        columns:
          type: array
          items:
            type: string
      required:
      - columns
    _Owner:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        schema:
          type: object
          additionalProperties: {}
          nullable: true
        columns:
          type: array
          items:
            $ref: '#/components/schemas/_Column'
          default: []
      required:
      - id
      - name
      - schema
    _OwnerModel:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        schema:
          type: object
          additionalProperties: {}
          nullable: true
        columns:
          type: array
          items:
            $ref: '#/components/schemas/_ColumnModel'
          default: []
      required:
      - id
      - name
    _OwnerModelRequest:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        schema:
          type: object
          additionalProperties: {}
          nullable: true
        columns:
          type: array
          items:
            $ref: '#/components/schemas/_ColumnModelRequest'
          default: []
      required:
      - id
      - name
    _OwnerRequest:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        schema:
          type: object
          additionalProperties: {}
          nullable: true
        columns:
          type: array
          items:
            $ref: '#/components/schemas/_ColumnRequest'
          default: []
      required:
      - id
      - name
      - schema
    _PartialCredentialModel:
      type: object
      properties:
        host:
          type: string
        port:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        database:
          type: string
        model:
          $ref: '#/components/schemas/ModelEnum'
        owners:
          type: array
          items:
            $ref: '#/components/schemas/_OwnerModel'
          default: []
      required:
      - database
      - host
      - model
      - port
    _Resource:
      type: object
      properties:
        id:
          type: string
        label:
          type: string
        primary_key_table:
          type: string
        primary_key_column:
          type: string
        definition_id:
          type: string
        primary_key_owner:
          type: string
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/_Attribute'
          default: []
        filters:
          type: array
          items:
            $ref: '#/components/schemas/_Filter'
          default: []
        logical_reference:
          type: string
      required:
      - definition_id
      - id
      - label
      - logical_reference
      - primary_key_column
      - primary_key_owner
      - primary_key_table
    _ResourceModel:
      type: object
      properties:
        id:
          type: string
        label:
          type: string
        primary_key_table:
          type: string
        primary_key_column:
          type: string
        definition_id:
          type: string
        logical_reference:
          type: string
        primary_key_owner:
          type: string
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/_AttributeModel'
          default: []
        filters:
          type: array
          items:
            $ref: '#/components/schemas/_FilterModel'
          default: []
      required:
      - definition_id
      - id
      - logical_reference
      - primary_key_column
      - primary_key_owner
      - primary_key_table
    _ResourceModelRequest:
      type: object
      properties:
        id:
          type: string
        label:
          type: string
        primary_key_table:
          type: string
        primary_key_column:
          type: string
        definition_id:
          type: string
        logical_reference:
          type: string
        primary_key_owner:
          type: string
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/_AttributeModelRequest'
          default: []
        filters:
          type: array
          items:
            $ref: '#/components/schemas/_FilterModelRequest'
          default: []
      required:
      - definition_id
      - id
      - logical_reference
      - primary_key_column
      - primary_key_owner
      - primary_key_table
    _ResourceRequest:
      type: object
      properties:
        id:
          type: string
        label:
          type: string
        primary_key_table:
          type: string
        primary_key_column:
          type: string
        definition_id:
          type: string
        primary_key_owner:
          type: string
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/_AttributeRequest'
          default: []
        filters:
          type: array
          items:
            $ref: '#/components/schemas/_FilterRequest'
          default: []
        logical_reference:
          type: string
      required:
      - definition_id
      - id
      - label
      - logical_reference
      - primary_key_column
      - primary_key_owner
      - primary_key_table
    _User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        username:
          type: string
      required:
      - email
      - id
      - username
    _UserRequest:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        username:
          type: string
      required:
      - email
      - id
      - username
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: Session
