# name: test_list_scripts
  <class 'list'> [
    <class 'dict'> {
      'category': 'cleaning',
      'description': 'Map (0,1) to (False, True)',
      'name': 'binary_to_bool_1',
    },
    <class 'dict'> {
      'category': 'cleaning',
      'description': 'Map (0,1) to (True, False)',
      'name': 'binary_to_bool_2',
    },
    <class 'dict'> {
      'category': 'cleaning',
      'description': None,
      'name': 'clean_address',
    },
    <class 'dict'> {
      'category': 'cleaning',
      'description': 'Remove terminology system from code ("HL7:male") to ("male")',
      'name': 'clean_codes',
    },
    <class 'dict'> {
      'category': 'cleaning',
      'description': None,
      'name': 'clean_date',
    },
    <class 'dict'> {
      'category': 'cleaning',
      'description': None,
      'name': 'clean_dateTime',
    },
    <class 'dict'> {
      'category': 'cleaning',
      'description': None,
      'name': 'clean_instant',
    },
    <class 'dict'> {
      'category': 'cleaning',
      'description': 'Remove special character from long BLOB / CLOB text in ORBIS',
      'name': 'clean_long_text_ORBIS',
    },
    <class 'dict'> {
      'category': 'cleaning',
      'description': None,
      'name': 'clean_phone',
    },
    <class 'dict'> {
      'category': 'cleaning',
      'description': '
        [deprecated: river parses types automatically]
        Removes input not conform to FHIR quantity type
      ',
      'name': 'clean_quantity',
    },
    <class 'dict'> {
      'category': 'cleaning',
      'description': None,
      'name': 'clean_time',
    },
    <class 'dict'> {
      'category': 'cleaning',
      'description': 'Return None when entry is some code: -1 or (sans)',
      'name': 'code_to_empty',
    },
    <class 'dict'> {
      'category': 'cleaning',
      'description': None,
      'name': 'if_valid',
    },
    <class 'dict'> {
      'category': 'cleaning',
      'description': 'Capitalize and strip',
      'name': 'make_title',
    },
    <class 'dict'> {
      'category': 'cleaning',
      'description': 'Map some code from (2->True) and None otherwise',
      'name': 'map_2_true',
    },
    <class 'dict'> {
      'category': 'cleaning',
      'description': 'Map (O,N) to (True, False)',
      'name': 'map_deceased',
    },
    <class 'dict'> {
      'category': 'cleaning',
      'description': 'Maps French family situation',
      'name': 'map_family_situation',
    },
    <class 'dict'> {
      'category': 'cleaning',
      'description': 'Map gender from (M,F) or (HL7:M, HL7:F) to (male,female)',
      'name': 'map_gender',
    },
    <class 'dict'> {
      'category': 'cleaning',
      'description': 'Map gender from (1,2) to (male, female)',
      'name': 'map_gender_numeric',
    },
    <class 'dict'> {
      'category': 'cleaning',
      'description': 'Map (0,1,NULL) to (plan, order, proposal)',
      'name': 'map_intent',
    },
    <class 'dict'> {
      'category': 'cleaning',
      'description': 'Map MIMIC marital status',
      'name': 'map_marital_status',
    },
    <class 'dict'> {
      'category': 'cleaning',
      'description': 'Map UMLS codes (Yes, No) to (permit, deny)',
      'name': 'map_permission',
    },
    <class 'dict'> {
      'category': 'cleaning',
      'description': 'Map int to ServiceRequest.priority (1: stat, 2: asap, 3: urgent, else: routine)',
      'name': 'map_priority',
    },
    <class 'dict'> {
      'category': 'cleaning',
      'description': 'Map code (0,1) to (active,inactive)',
      'name': 'map_status',
    },
    <class 'dict'> {
      'category': 'cleaning',
      'description': 'Convert ("True","true","TRUE") to (True)..',
      'name': 'string_to_bool',
    },
    <class 'dict'> {
      'category': 'cleaning',
      'description': 'Strip strings, convert NaN and None to empty string',
      'name': 'strip',
    },
    <class 'dict'> {
      'category': 'cleaning',
      'description': 'Return None when entry is 0',
      'name': 'zero_to_empty',
    },
    <class 'dict'> {
      'category': 'merging',
      'description': 'Merging script with a simple concatenation and a " " separator',
      'name': 'merge_concat',
    },
    <class 'dict'> {
      'category': 'merging',
      'description': 'Merging script with a datetime concatenation',
      'name': 'merge_datetime',
    },
    <class 'dict'> {
      'category': 'merging',
      'description': None,
      'name': 'merge_insee',
    },
    <class 'dict'> {
      'category': 'merging',
      'description': 'Merging script with a instant concatenation',
      'name': 'merge_instant',
    },
    <class 'dict'> {
      'category': 'merging',
      'description': 'Merge two binary entries and return a FHIR CarePlan.status',
      'name': 'merge_status',
    },
    <class 'dict'> {
      'category': 'merging',
      'description': 'Merging script which select the first input not empty',
      'name': 'select_first_not_empty',
    },
  ]
---
